#version 100
precision mediump float;
precision highp int;

uniform highp vec2 u_resolution;

varying highp float seed;
varying highp vec4 sTypes;
varying highp float uvScale;
varying highp float sDeleted;
varying highp vec2 fragCoord;
varying highp vec2 uvPosition;
varying highp float sResolution;
varying highp float u_time;

highp vec3 galaxy(highp vec2 uv)
{
    highp float rho = length(uv);
    highp float ang = atan(uv.y, uv.x);
    highp float shear = 2.0 * log(rho);
    highp float c = cos(shear);
    highp float s = sin(shear);
    highp mat2 R = mat2(vec2(c, -s), vec2(s, c));
    highp float r = rho / 1.0;
    highp float dens = exp((-r) * r);
    r = rho / 0.25;
    highp float bulb = exp((-r) * r);
    highp float phase = 5.0 * (ang - shear);
    highp float spires = 1.0 + (0.5 * sin(phase));
    dens *= (0.699999988079071044921875 * spires);
    return vec3(dens);
}

highp vec2 random2(highp vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(seed, 311.70001220703125)), dot(p, vec2(269.5, 183.3000030517578125)))) * 43758.546875);
}

highp float littleStar(inout highp float m_dist, highp float fbmCoef)
{
    m_dist += (fbmCoef * 0.5);
    m_dist = 0.00999999977648258209228515625 / m_dist;
    m_dist = abs(m_dist);
    return m_dist;
}

highp vec3 getColor(highp float star, highp float m_dist)
{
    highp vec3 color = vec3(0.0);
    if ((star >= 0.0) && (star <= 0.25))
    {
        color = vec3(2.0, 1.0, 0.5) * sTypes.x;
    }
    if ((star > 0.25) && (star <= 0.5))
    {
        color = vec3(2.0, 2.0, 0.5) * sTypes.y;
    }
    if ((star > 0.5) && (star <= 0.75))
    {
        color = vec3(0.25, 0.25, 2.0) * sTypes.z;
    }
    if ((star > 0.75) && (star <= 1.0))
    {
        color = vec3(1.0) * sTypes.w;
    }
    return (color * m_dist) * (31.0 - uvScale);
}

highp vec3 stars(inout highp vec2 uv, highp float coef)
{
    highp vec3 sky = vec3(0.0);
    uv *= coef;
    highp vec2 i_st = floor(uv);
    highp vec2 f_st = fract(uv);
    highp float starNoise = fract(sin(dot(i_st, vec2(12.98980045318603515625, 78.233001708984375))) * 43758.546875);
    if (starNoise < sDeleted)
    {
        return vec3(0.0);
    }
    highp float m_dist = 1.0;
    highp vec2 m_point = vec2(0.0);
    highp vec2 m_diff = vec2(0.0);
    for (int y = -1; y <= 1; y++)
    {
        for (int x = -1; x <= 1; x++)
        {
            highp vec2 neighbor = vec2(float(x), float(y));
            highp vec2 param = i_st + neighbor;
            highp vec2 point = random2(param);
            highp vec2 diff = (neighbor + point) - f_st;
            highp float dist = 0.0;
            dist = length(diff);
            if (dist < m_dist)
            {
                m_dist = dist;
                m_point = point;
                m_diff = diff;
            }
        }
    }
    highp float fbmCoef = 0.0;
    highp float param_1 = m_dist;
    highp float param_2 = fbmCoef;
    highp float _292 = littleStar(param_1, param_2);
    m_dist = _292;
    sky += vec3(m_dist);
    highp float param_3 = m_point.x * m_point.y;
    highp float param_4 = m_dist;
    sky *= getColor(param_3, param_4);
    return sky;
}

void main()
{
    highp vec2 uv = fragCoord;
    uv += uvPosition;
    highp vec3 col = vec3(1.0, 0.0, 0.0);
    highp float uvScaleCoef = uvScale - 0.5;
    highp vec2 param = (uv * 1.0) / vec2(uvScaleCoef);
    highp vec3 galaxyTemp = (galaxy(param) * 1.0) / vec3((uvScale * uvScale) - 0.75);
    highp vec3 starSky = vec3(0.0);
    if (uvScale < 27.0)
    {
        highp vec2 param_1 = uv;
        highp float param_2 = (sResolution * 0.100000001490116119384765625) / uvScale;
        highp vec3 _354 = stars(param_1, param_2);
        starSky = _354;
    }
    else
    {
        highp vec2 param_3 = uv;
        highp float param_4 = 31.0 - uvScale;
        highp vec3 _361 = stars(param_3, param_4);
        starSky = _361;
    }
    if (uvScale > 5.0)
    {
        col = starSky;
    }
    else
    {
        col = (galaxyTemp * starSky) + (galaxyTemp / vec3(10.0));
    }
    gl_FragData[0] = vec4(col, 1.0);
}


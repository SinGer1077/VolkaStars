#version 300 es
precision mediump float;
precision highp int;

uniform highp float u_time;
uniform highp vec2 u_resolution;

in highp vec2 fragCoord;
in highp float uvScale;
out highp vec4 fragColor;
in highp vec2 uvPosition;

highp vec3 galaxy(highp vec2 uv)
{
    highp float rho = length(uv);
    highp float ang = atan(uv.y, uv.x);
    highp float shear = 2.0 * log(rho);
    highp float c = cos(shear);
    highp float s = sin(shear);
    highp mat2 R = mat2(vec2(c, -s), vec2(s, c));
    highp float r = rho / 1.0;
    highp float dens = exp((-r) * r);
    r = rho / 0.25;
    highp float bulb = exp((-r) * r);
    highp float phase = 5.0 * (ang - shear);
    highp float spires = 1.0 + (0.5 * sin(phase));
    dens *= (0.699999988079071044921875 * spires);
    return vec3(dens);
}

highp vec2 random2(highp vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(127.09999847412109375, 311.70001220703125)), dot(p, vec2(269.5, 183.3000030517578125)))) * 43758.546875);
}

highp float random(highp vec2 uv)
{
    return fract(sin(dot(uv, vec2(12.98980045318603515625, 79.3209991455078125))) * 51758.5390625);
}

highp float noise(highp vec2 uv)
{
    highp vec2 i = floor(uv);
    highp vec2 f = fract(uv);
    highp vec2 param = i;
    highp float a = random(param);
    highp vec2 param_1 = i + vec2(1.0, 0.0);
    highp float b = random(param_1);
    highp vec2 param_2 = i + vec2(0.0, 1.0);
    highp float c = random(param_2);
    highp vec2 param_3 = i + vec2(1.0);
    highp float d = random(param_3);
    highp vec2 u = (f * f) * (vec2(3.0) - (f * 2.0));
    return (mix(a, b, u.x) + (((c - a) * u.y) * (1.0 - u.x))) + (((d - b) * u.x) * u.y);
}

highp float fbm(inout highp vec2 uv)
{
    int octaves = 2;
    highp float v = 0.0;
    highp float a = 0.5;
    highp vec2 shift = vec2(100.0);
    highp mat2 rot = mat2(vec2(0.877582550048828125, 0.47942554950714111328125), vec2(-0.47942554950714111328125, 0.877582550048828125));
    for (int i = 0; i < octaves; i++)
    {
        highp vec2 param = uv;
        v += (a * noise(param));
        uv = ((rot * uv) * 2.0) + shift;
        a *= 0.5;
    }
    return v;
}

highp float bigStarFBM(highp vec2 uv, highp vec2 point)
{
    highp vec2 q = vec2(0.0);
    highp vec2 param = uv + vec2(0.100000001490116119384765625 * u_time);
    highp float _272 = fbm(param);
    q.x = _272 + point.x;
    highp vec2 param_1 = uv + vec2(1.0);
    highp float _280 = fbm(param_1);
    q.y = _280 + point.y;
    highp vec2 r = vec2(0.0);
    highp vec2 param_2 = ((uv + (q * 1.0)) + vec2(1.7000000476837158203125, 9.19999980926513671875)) + vec2(0.100000001490116119384765625 * u_time);
    highp float _299 = fbm(param_2);
    r.x = _299;
    highp vec2 param_3 = ((uv + (q * 1.0)) + vec2(8.30000019073486328125, 2.7999999523162841796875)) + vec2(0.12600000202655792236328125 * u_time);
    highp float _315 = fbm(param_3);
    r.y = _315;
    highp vec2 param_4 = uv + r;
    highp float _322 = fbm(param_4);
    highp float f = _322;
    return f;
}

highp float littleStar(inout highp float m_dist, highp float fbmCoef)
{
    m_dist += (fbmCoef * 0.5);
    m_dist = 0.00999999977648258209228515625 / m_dist;
    m_dist = abs(m_dist);
    return m_dist;
}

highp vec3 stars(inout highp vec2 uv, highp float coef)
{
    highp vec3 sky = vec3(0.0);
    uv *= coef;
    highp vec2 i_st = floor(uv);
    highp vec2 f_st = fract(uv);
    highp float m_dist = 1.0;
    for (int y = -1; y <= 1; y++)
    {
        for (int x = -1; x <= 1; x++)
        {
            highp vec2 neighbor = vec2(float(x), float(y));
            highp vec2 param = i_st + neighbor;
            highp vec2 point = random2(param);
            highp vec2 diff = (neighbor + point) - f_st;
            highp float dist = 0.0;
            if (coef < 5.0)
            {
                highp vec2 param_1 = diff;
                highp vec2 param_2 = point;
                dist = (length(diff) - (bigStarFBM(param_1, param_2) * 0.25)) + 0.07500000298023223876953125;
            }
            else
            {
                dist = length(diff);
            }
            m_dist = min(m_dist, dist);
        }
    }
    highp float fbmCoef = 0.0;
    highp float param_3 = m_dist;
    highp float param_4 = fbmCoef;
    highp float _417 = littleStar(param_3, param_4);
    m_dist = _417;
    sky += vec3(m_dist);
    return sky;
}

void main()
{
    highp vec2 uv = fragCoord;
    highp vec3 col = vec3(1.0, 0.0, 0.0);
    highp vec2 param = uv;
    col = galaxy(param);
    highp vec2 param_1 = uv;
    highp float param_2 = uvScale;
    highp vec3 _440 = stars(param_1, param_2);
    col *= _440;
    fragColor = vec4(col, 1.0);
}


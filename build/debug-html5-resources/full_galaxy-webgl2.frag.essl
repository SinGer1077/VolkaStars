#version 300 es
precision mediump float;
precision highp int;

uniform highp vec2 u_resolution;

in highp vec2 fragCoord;
out highp vec4 fragColor;

highp vec3 galaxy(highp vec2 uv)
{
    highp float rho = length(uv);
    highp float ang = atan(uv.y, uv.x);
    highp float shear = 2.0 * log(rho);
    highp float c = cos(shear);
    highp float s = sin(shear);
    highp mat2 R = mat2(vec2(c, -s), vec2(s, c));
    highp float r = rho / 1.0;
    highp float dens = exp((-r) * r);
    r = rho / 0.25;
    highp float bulb = exp((-r) * r);
    highp float phase = 5.0 * (ang - shear);
    highp float spires = 1.0 + (0.5 * sin(phase));
    dens *= (0.699999988079071044921875 * spires);
    return vec3(dens);
}

highp vec2 random2(highp vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(127.09999847412109375, 311.70001220703125)), dot(p, vec2(269.5, 183.3000030517578125)))) * 43758.546875);
}

highp vec3 stars(inout highp vec2 uv)
{
    highp vec3 sky = vec3(0.0);
    uv *= 1.5;
    highp vec2 i_st = floor(uv);
    highp vec2 f_st = fract(uv);
    highp float m_dist = 1.0;
    for (int y = -1; y <= 1; y++)
    {
        for (int x = -1; x <= 1; x++)
        {
            highp vec2 neighbor = vec2(float(x), float(y));
            highp vec2 param = i_st + neighbor;
            highp vec2 point = random2(param);
            highp vec2 diff = (neighbor + point) - f_st;
            highp float dist = length(diff);
            m_dist = min(m_dist, dist);
        }
    }
    m_dist = 0.00999999977648258209228515625 / m_dist;
    m_dist = abs(m_dist);
    sky += vec3(m_dist);
    return sky;
}

void main()
{
    highp vec2 uv = fragCoord;
    highp vec3 col = vec3(1.0, 0.0, 0.0);
    highp vec2 param = uv;
    col = galaxy(param);
    highp vec2 param_1 = uv * 100.0;
    highp vec3 _201 = stars(param_1);
    col *= _201;
    fragColor = vec4(col, 1.0);
}

